<?php

class ImportNodeTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Import Merge Node',
      'description' => 'Test Node merges',
      'group' => 'Import Merge',
    );
  }
  
  public function tearDown() {
    parent::tearDown();
  }
  
  public function setUp() {
    parent::setUp('import_merge', 'import_merge_node', 'import_node_test');
  }
  
  public function profileCreateNode($settings = array()) {
    return $this->drupalCreateNode($settings);
  }
  
  public function testNodeMerge() {
    $settings = array();
    $node = $this->drupalCreateNode($settings);
    
    $profile = import_merge_node_merge_profile();
    $profile->set_callback = 'import_node_test_node_save';
    $profile->get_callback = 'import_node_test_node_load';
    $profile->create_callback = 'import_node_test_create_node';
    $profile->meta = $this;
    $profile->get_data_key = 'title';
      
    $profile->data = array(
      array('title' => $this->randomName(32), 'body' => $this->randomName(64)),
      array('title' => $this->randomName(32), 'body' => $this->randomName(64)),
    );
    
    //create new
    $profile->create_new = TRUE;
    import_merge_execute($profile);
    $this->assertTrue(is_object(node_load(array('title' => $profile->data[1]['title']))));
    
    //over write (using last test's nodes)
    $profile->data[1]['body'] = $this->randomName(16);
    $profile->overwrite = TRUE;
    $profile->create_new = FALSE;
    import_merge_execute($profile);
    $node = node_load(array('title' => $profile->data[1]['title']));
    $this->assertEqual($profile->data[1]['body'], $node->body);
    
  }

}