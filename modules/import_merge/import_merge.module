<?php
/**
 * 
 * @file
 * 
 * An import API that grabs data from a file and delegates to other module
 * for merging with objects such as nodes, users of taxonomy terms.
 * 
 * Written by Rimian Perkins
 * @see http://www.rimian.com.au
 * @see http://drupal.org/user/96072
 * Released under GNU LESSER GENERAL PUBLIC LICENSE
 * @see http://drupal.org/LICENSE.txt
 * Please buy me beer if you use this module and happen to be around when I am drinking a beer
 * @see http://www.coopers.com.au
 */


/**
 * Execute merge
 * @param object $profile. A merge profile
 */
function import_merge_execute($profile) {
  foreach($profile->data as $row) {
    $object = NULL;
    if($profile->overwrite) {
      $object = call_user_func($profile->get_callback, array($profile->get_data_key => $row[$profile->get_data_key]), $profile->meta);
    }
    if(!$object && $profile->create_new) {
      $object = call_user_func($profile->create_callback, $row, $profile->meta);
    }
    if(!empty($object)) {
      import_merge_invoke_merge($profile->type, $object, $row, $profile->meta);
      call_user_func($profile->set_callback, $object);
    }
  }
}

/**
 * A default merge profile. This contains info about the merge and rows
 * @param array [optional] $settings
 * @return object $profile
 */
function import_merge_merge_profile($settings = array()) {
  $profile = new stdClass;
  $profile->name = NULL;
  $profile->type = NULL;
  $profile->overwrite = FALSE;
  $profile->create_new = TRUE;
  $profile->data = array();
  $profile->get_callback = NULL;
  $profile->set_callback = NULL;
  $profile->create_callback = NULL;
  $profile->get_data_key = NULL;
  $profile->meta = NULL;
  
  foreach($settings as $key => $value) {
    $profile->$key = $value;
  }
  return $profile;
}



/**
 * Delegate to modules that merge the imported data with the object
 * @param string $type 
 * @param object $object. A node, user or anything
 * @param object $data. The data to merge
 * @param mixed $meta. Meta Information about this merge operation
 */
function import_merge_invoke_merge($type, &$object, $data, $meta) {
  $hook = 'merge';
  foreach (module_implements($hook) as $module) {
    $function = $module .'_'. $hook;
    $function($type, &$object, $data, $meta);
  }
}

