<?php
/**
 * 
 * @file
 * 
 * An import API that grabs data from a file and delegates to other module
 * for merging with objects such as nodes, users of taxonomy terms.
 * 
 * Written by Rimian Perkins
 * @see http://www.rimian.com.au
 * @see http://drupal.org/user/96072
 * Released under GNU LESSER GENERAL PUBLIC LICENSE
 * @see http://drupal.org/LICENSE.txt
 * Please buy me beer if you use this module and happen to be around when I am drinking a beer
 * @see http://www.coopers.com.au
 */

include('import_merge.file.inc');

/**
 * Implement hook_menu() 
 */
function import_merge_menu() {
  $items = array();
  $items['import'] = array(
    'title' => t('Import Data'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('import_merge_form'),
    'access arguments' => array('import content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['import/fields'] = array(
    'title' => t('Import Data'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('import_merge_form_fields'),
    'access arguments' => array('import content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implement hook_perm() 
 */
function import_merge_perm() {
  return array('import content');
}

/**
 * The first form. Choose a file and work flow options. 
 */
function import_merge_form($form_state) {
  $file = $form_state['post']['file'];
  $form = array();
  
  $info = import_merge_get_info();

  $file_options = array();
  foreach(import_merge_get_files() as $file_object) {
    $file_options[$file_object->filename] = $file_object->basename;
  }

  $form['files'] = array(
    '#type' => 'fieldset',
    '#title' => t('Files'),
    '#collapsible' => TRUE,
    '#description' => 'Your import path is: ' . import_merge_get_file_path(),
  );
  $form['files']['file'] = array(
    '#type' => 'radios',
    '#options' => $file_options,
  );
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Object Type'),
    '#description' => 'This is the type of object that gets loaded or created with the import data',
    '#options' => !empty($info['types']) ? array_combine($info['types'], $info['types']) : array(),
  );
  $form['key'] = array(
    '#type' => 'select',
    '#title' => t('Update Key'),
    '#description' => 'Load and update objects matching this key.',
    '#default_value' => variable_get('import_default_key', ''),
    '#options' => array('<none>') + $info['keys'],
  );
  $form['workflow'] = array(
    '#type' => 'fieldset',
    '#title' => t('Work Flow'),
    '#collapsible' => TRUE,
  );
  $form['workflow']['create-new'] = array(
    '#type' => 'checkbox',
    '#title' => t('Create new data'),
    '#description' => 'Create new objects, if they don\'t exist from the imported data',
    '#default_value' => variable_get('import_default_create_new', 1),
  );
  $form['workflow']['overwrite'] = array(
    '#type' => 'checkbox',
    '#title' => t('Overwrite existing objects'),
    '#description' => 'Overwrite existing objects loaded with this data',
    '#default_value' => variable_get('import_default_skip_existing', 0),
  );
  $form['preview'] = array(
    '#type' => 'button',
    '#value' => t('Preview File'),
    '#submit' => 'import_merge_preview_rows',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Next'),
    '#attributes' => array('onclick' => '
      var form = document.getElementById(\'import-merge-form\');
      form.action = \'import/fields\';
      '),
  );
  if(!empty($file)) {
    $form['rows'] = array(
      '#type' => 'item',
      '#value' => import_merge_preview_rows($file, 20),
    );
  }
  return $form;
}

function import_merge_preview_rows($file, $limit) {
  $header = import_merge_file_to_array($file, 'header');
  $rows = import_merge_file_to_array($file, 'list', $limit);
  return theme('table', $header, $rows, array('style' => 'font-size: 0.8em;'));
}

/**
 * The second form. This matches rows with object info 
 */
function import_merge_form_fields($form_state) {
  
  $form = array();
  if(empty($form_state['post']['file'])){
    return $form;
  }
  foreach(array('file', 'key', 'create-new', 'overwrite', 'type', 'new-published') as $hidden) {
    $form[$hidden] = array('#type' => 'hidden', '#value' => $form_state['post'][$hidden],);
  }

  $info = import_merge_get_info($form_state['post']['type']);
  
  foreach(import_merge_file_to_array($form_state['post']['file'], 'header') as $key => $col) {
    if(!empty($col)) {
      $do_it = TRUE;
      $form['field-'.$key] = array(
        '#title' => $col,
        '#type' => 'select',
        '#options' => array('Ignore') + $info['fields'],
      );
      $form['field-'.$key]['#title'] = $col;
    }
  }
  if($do_it) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Do it'),
    );
  }
  return $form;
}

/**
 * Implement hook_submit()
 */
function import_merge_form_fields_submit($form, &$form_state) {
  
  //get user join selection and make row data array
  $fields = _import_merge_get_form_field_keys_value($form_state['values']);
  $file_data = import_merge_file_to_array($form_state['values']['file'], 'skip-header', variable_get('import_row_limit', 0), $fields);
  $rows = array();
  foreach($file_data as $data){
    $rows[] = array_combine($fields, $data);
  }

  //get info about contributes module form values
  $merge_data = array();
  
  //create merge object
  $merge_settings = array(
    'type' => $form_state['values']['type'],
    'load' => $form_state['values']['key'],
    'overwrite' => $form_state['values']['overwrite'],
    'create' => $form_state['values']['create-new'],
    'rows' => $rows,
    'meta' => $merge_data,
  );
  $merge = import_merge_merge_object($merge_settings);
  
  //execute
  import_merge_execute($merge);
  drupal_set_message('Imported!', 'status', FALSE);
}

/**
 * Execute merge
 * @param object $merge
 */
function import_merge_execute($merge) {
  foreach($merge->rows as $row) {
    $object = NULL;
    if(!empty($merge->load) && $merge->overwrite) {
      $object = import_merge_invoke_init($merge->type, array('key' => $merge->load, 'value' => $row[$merge->load]), 'load', $merge->meta);
    } 
    if(!$object && $merge->create) {
      $object = import_merge_invoke_init($merge->type, $row, 'create', $merge->meta);
    }
    if(!empty($object)) {
      import_merge_invoke_merge($merge->type, $object, $row, $merge->meta);
      import_merge_invoke_save($merge->type, $object);
    }
  }
}

/**
 * A merge object. This contains info about the merge and rows
 * @param array [optional] $settings
 * @return object $merge
 */
function import_merge_merge_object($settings = array()) {
  $merge = new stdClass;
  $merge->type = NULL;
  $merge->load = NULL;
  $merge->overwrite = FALSE;
  $merge->create = TRUE;
  $merge->rows = array();
  $merge->meta = NULL;
  foreach($settings as $key => $value) {
    $merge->$key = $value;
  }
  return $merge;
}

/**
 * The interface to import_merge_invoke_info()
 * @param string $object_type
 * @return array $info all the info for this type or all types
 */
function import_merge_get_info($object_type = NULL) {
  $info = array(
    'types' => array(),
    'keys' => array(),
    'fields' => array(),
  );
  foreach(import_merge_invoke_info() as $module_info) {
    if(is_null($object_type) || $module_info['type'] == $object_type) {
      //TODO: eeeww!
      $info['types'][$module_info['type']] = $module_info['type'];
      if(is_array($module_info['keys'])) $info['keys'] = array_merge($info['keys'], $module_info['keys']);
      if(is_array($module_info['fields'])) $info['fields'] = array_merge($info['fields'], $module_info['fields']);
    }
  }
  return $info;
}

/**
 * Load information about contributed modules
 * 
 * You should not call this function directly.
 * @see import_merge_get_object_info()
 * 
 * @return array 
 */
function import_merge_invoke_info() {
  $info = array();
  $hook = 'im';
  foreach (module_implements($hook) as $module) {
    $info[] = call_user_func($module .'_'. $hook);
  }
  return $info;
}

/**
 * Load or create a new object
 * @param string $object_type
 * @param $data
 * @param string $op
 * @param mixed $meta. Meta Information about this merge operation
 */
function import_merge_invoke_init($object_type, $data, $op, $meta = NULL) {
  $hook = 'im_init';
  foreach (module_implements($hook) as $module) {
    $object = call_user_func($module .'_'. $hook, $object_type, $data, $op);
    if(!empty($object)){
      return $object;
    }
  } 
  return FALSE;
}

/**
 * Merge the imported data with the object
 * @param string $object_type 
 * @param object $object. A node, user or anything
 * @param array $data. A data row from the file
 * @param mixed $meta. Meta Information about this merge operation
 */
function import_merge_invoke_merge($object_type, &$object, $data, $meta = NULL) {
  $hook = 'im_merge';
  foreach (module_implements($hook) as $module) {
    call_user_func($module .'_'. $hook, $object_type, &$object, $data, $meta);
  }
}

/**
 * Save an object
 * @param string $object_type 
 * @param object $object. A node, user or anything
 */
function import_merge_invoke_save($object_type, $object) {
  $hook = 'im_save';
  foreach (module_implements($hook) as $module) {
    call_user_func($module .'_'. $hook, $object_type, $object);
  }
}

/**
 * Get the user values for each info key  
 */
function _import_merge_get_form_field_keys_value($values) {
  $keys = array();
  for($i = 0; $i < count(import_merge_file_to_array($values['file'], 'header')); $i++) {
    $field = $values['field-'. $i];
    if(!empty($field)) {
      $keys[$i] = $field;
    }
  }
  return $keys;
}

function _import_merge_tidy_data($data) {
  $tidy_data = array();
  foreach($data as $col){
    $tidy_data[] = trim(check_plain($col));
  }
  return $tidy_data;
}


